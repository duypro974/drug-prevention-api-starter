// src/controllers/courseSurvey.controller.js

const Course = require("../models/course.model");
const CourseRegistration = require("../models/courseRegistration.model");
const Survey = require("../models/survey.model");
const User = require("../models/user.model");
const { sendRiskLevelEmail } = require("../utils/email.utils");

/**
 * Submit Pre-Survey cho kh√≥a h·ªçc
 */

exports.submitCoursePreSurvey = async (req, res) => {
  const { id: courseId } = req.params;
  const { answers } = req.body;

  try {
    const course = await Course.findById(courseId);
    if (!course)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc" });

    const reg = await CourseRegistration.findOne({
      user: req.user.id,
      course: courseId,
    });
    if (!reg) {
      return res.status(403).json({ message: "B·∫°n ch∆∞a ƒëƒÉng k√Ω kh√≥a n√†y" });
    }

    if (!Array.isArray(answers) || answers.some((v) => typeof v !== "number")) {
      return res.status(400).json({ message: "answers ph·∫£i l√† m·∫£ng s·ªë" });
    }

    const type = course.surveyType;
    const total = answers.reduce((sum, v) => sum + v, 0);
    // üîí B·ªî SUNG KI·ªÇM TRA S·ªê L∆Ø·ª¢NG C√ÇU TR·∫¢ L·ªúI
    const requiredLength = type === "ASSIST" ? 10 : 6;
    if (
      !Array.isArray(answers) ||
      answers.some((v) => typeof v !== "number") ||
      answers.length !== requiredLength
    ) {
      return res.status(400).json({
        message: `B·∫°n ph·∫£i tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß ${requiredLength} c√¢u h·ªèi cho kh·∫£o s√°t ${type}`,
      });
    }

    let riskLevel;
    if (type === "ASSIST") {
      riskLevel = total <= 10 ? "low" : total <= 26 ? "moderate" : "high";
    } else {
      riskLevel = total === 0 ? "low" : total <= 2 ? "moderate" : "high";
    }

    const survey = await Survey.create({
      user: req.user.id,
      course: courseId,
      type,
      phase: "pre",
      answers,
      score: total,
      riskLevel,
    });

    await CourseRegistration.findOneAndUpdate(
      { user: req.user.id, course: courseId },
      { preSurveyDone: true, preRiskLevel: riskLevel }
    );

    let recommendation, nextAction;
    if (riskLevel === "high") {
      recommendation =
        "B·∫°n ƒëang ·ªü m·ª©c r·ªßi ro cao ‚Äî h√£y ƒë·∫∑t l·ªãch t∆∞ v·∫•n ngay v·ªõi chuy√™n vi√™n.";
      nextAction = {
        action: "bookConsultation",
        link: `/api/appointments?course=${courseId}`,
      };
    } else if (riskLevel === "moderate") {
      recommendation =
        "B·∫°n ·ªü m·ª©c r·ªßi ro trung b√¨nh ‚Äî c√¢n nh·∫Øc tham gia bu·ªïi t∆∞ v·∫•n.";
      nextAction = {
        action: "bookConsultation",
        link: `/api/appointments?course=${courseId}`,
      };
    } else {
      recommendation =
        "B·∫°n c√≥ m·ª©c r·ªßi ro th·∫•p ‚Äî b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu kh√≥a h·ªçc ngay b√¢y gi·ªù.";
      nextAction = {
        action: "startCourse",
        link: `/courses/${courseId}/content`,
      };
    }

    const user = await User.findById(req.user.id).select("email");
    await sendRiskLevelEmail(user.email, {
      courseTitle: course.title,
      riskLevel,
      recommendation,
      link: nextAction.link,
    });

    res.status(201).json({
      survey,
      recommendation,
      nextAction,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

/**
 * Submit Post-Survey cho kh√≥a h·ªçc
 */
exports.submitCoursePostSurvey = async (req, res) => {
  const { id: courseId } = req.params;
  const { answers } = req.body;

  try {
    // 1. Kh√≥a h·ªçc t·ªìn t·∫°i
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc" });
    }

    // 2. Ki·ªÉm user ƒë√£ ƒëƒÉng k√Ω
    const reg = await CourseRegistration.findOne({
      user: req.user.id,
      course: courseId,
    });
    if (!reg) {
      return res.status(403).json({ message: "B·∫°n ch∆∞a ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y" });
    }

    // 3. Validate answers
    if (!Array.isArray(answers) || answers.some((v) => typeof v !== "number")) {
      return res.status(400).json({ message: "answers ph·∫£i l√† m·∫£ng s·ªë" });
    }

    // 4. L·∫•y surveyType v√† t√≠nh score & risk
    const type = course.surveyType;
    const total = answers.reduce((sum, v) => sum + v, 0);
    // üîí B·ªî SUNG KI·ªÇM TRA S·ªê L∆Ø·ª¢NG C√ÇU TR·∫¢ L·ªúI
    const requiredLength = type === "ASSIST" ? 10 : 6;
    if (
      !Array.isArray(answers) ||
      answers.some((v) => typeof v !== "number") ||
      answers.length !== requiredLength
    ) {
      return res.status(400).json({
        message: `B·∫°n ph·∫£i tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß ${requiredLength} c√¢u h·ªèi cho kh·∫£o s√°t ${type}`,
      });
    }
    let riskLevel;
    if (type === "ASSIST") {
      riskLevel = total <= 10 ? "low" : total <= 26 ? "moderate" : "high";
    } else {
      riskLevel = total === 0 ? "low" : total <= 2 ? "moderate" : "high";
    }

    // 5. T·∫°o Post-Survey
    const survey = await Survey.create({
      user: req.user.id,
      course: courseId,
      type,
      phase: "post",
      answers,
      score: total,
      riskLevel,
    });

    // 6. Tr·∫£ v·ªÅ
    res.status(201).json({
      message: "Post-Survey ƒë√£ ƒë∆∞·ª£c l∆∞u",
      survey,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói server" });
  }
};
